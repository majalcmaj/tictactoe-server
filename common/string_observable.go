// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package common

type StringEventEmitter struct {
	subscribers []StringSubscriber
}

type StringSubscriber interface {
	EventFired(string)
}

func NewStringEventEmitter() *StringEventEmitter {
	return &StringEventEmitter{make([]StringSubscriber, 0, 1)}
}

func (emitter *StringEventEmitter) Subscribe(subscriber StringSubscriber) {
	emitter.subscribers = append(emitter.subscribers, subscriber)
}

func (emitter *StringEventEmitter) FireEvent(event string) {
	for _, sub := range emitter.subscribers {
		sub.EventFired(event)
	}
}
