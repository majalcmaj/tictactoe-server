// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package common

type IntEventEmitter struct {
	subscribers []IntSubscriber
}

type IntSubscriber interface {
	EventFired(int)
}

func NewIntEventEmitter() *IntEventEmitter {
	return &IntEventEmitter{make([]IntSubscriber, 0, 1)}
}

func (emitter *IntEventEmitter) Subscribe(subscriber IntSubscriber) {
	emitter.subscribers = append(emitter.subscribers, subscriber)
}

func (emitter *IntEventEmitter) FireEvent(event int) {
	for _, sub := range emitter.subscribers {
		sub.EventFired(event)
	}
}
